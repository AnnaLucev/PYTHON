# Задача 38
# Дополнить телефонный справочник возможностью изменения и удаления данных. Пользователь также может ввести имя или фамилию, и должны
# реализовать функционал для изменения или удаления данных

# # Задача 49
# # Создать телефонный справочник с возможностью импорта и экспорта данных в формате .txt.
# # Фамилия, имя, отчество, номер телефона - данные, которые должны быть в файле.
# # 1. Программа должна выводить данные
# # 2. Программа должна сохранять данные в текстовом файле
# # 3. Пользователь может ввести одну из характеристик для поиска определенной записи (например, имя или фамилию человека)
# # 4. Использование функций. Программа не должна быть линейной.

print("Задача 38(49) (телефонный справочник): ")    # телефонный справочник

# ==================== Функции для справочника =================================
 
def write_txt(filename: str, data: list):                               # Функция записи в файл, на вход подается название файла строкой и список,
    with open(filename, 'w', encoding='utf-8') as fout:                 # открываем файл и записываем содержимое в переменную fout,
        for i in range(len(data)):                                      # идем циклом по списку,
            s = ''                                                      # задаем переменную пустой строки,
            for v in data[i].values():                                  # внутри списка data по  каждому словарю  циклом запускается заполнение ЗНАЧЕНИЯМИ этого словаря
                s += v + ','                                            # пустая строка s заполняется значениями словаря через запятую    
            fout.write(f'{s[:-1]}\n')                                   # идет построчная запись значений справочника в переменную fout, т.е. в заданный файл
                                                                        # при этом убирается последний символ каждой строки - это запятая

def read_txt(filename: str) -> list:                                    # Функция открытия (чтения) файла, на вход задается файл в виде строки
    data = []                                                           # создаем пустой список
    fields = ["Фамилия", "Имя", "Отчество", "Телефон", "Описание"]      # создаем список полей (колонок)
    with open(filename, 'r', encoding='utf-8') as fin:                  # открываем файл и записываем содержимое в переменную fin
        for line in fin:                                                # идем циклом по содержимому файла для каждой строки в переменной
            record = dict(zip(fields, line.strip().split(',')))         # записываем в переменную record словарь, функция zip прим. к набору итерируемых объектов
                                                                        # возвращает итератор с кортежами из элементов входных данных.
                                                                        # Здесь - каждый словарь состоит из наборов - поле и его значение через запятую,
                                                                        # функция strip() удаляет начальные и конечные пробелы из строк
            data.append(record)                                         # все словари собираются в итоговый список data
    return data                                                         # функция возвращает в результате чтения из файла список data

def input_and_add_user_dict(data: list) :                                       # функция добавления и сохранения данных в список справочников
    N = int(input("Введите количество фамилий для заполнения - "))
    for i in range(N):
        print(f"Введите дополнительную строку справочника №{i+1} ")
        user_data   = ""
        user_data   =   str(input("Введите фамилию - ")) + "," + str(input("Введите имя - ")) + ","+ str(input("Введите отчество - ")) + ","+ str(input("Введите номер телефона - ")) + ","+ str(input("Введите комментарий  - "))
        print(user_data)
        add_user(data, user_data)
    return data  

def add_user(data: list, user_data: str):                                       # функция сохранения добавленных данных в список справочников
    fields = ["Фамилия", "Имя", "Отчество", "Телефон", "Описание"]
    record = dict(zip(fields, user_data.split(',')))
    data.append(record) 
    return data

def change_user_dict(data: list):                                               # функция изменения данных в справочнике
    name = str(input("Введите фамилию пользователя для изменения его данных - "))
    index = 0
    for i in range(len(data)):
        if data[i].get("Фамилия") == name:
            index = i
        else:     "Такой абонент отсутствует"
    data.pop(index)
    print(f"Введите новую информацию по пользователю через запятую - ")
    user_data   = str(input())
    add_user(data, user_data)
    return data


def delete_user_dict(data: list):                                               # функция удаления пользователей из списка справочника
    name = str(input("Введите фамилию пользователя для удаления - "))
    index = 0
    for i in range(len(data)):
        if data[i].get("Фамилия") == name:
            index = i
        else:     "Такой абонент отсутствует"
    data.pop(index)
    return data

def print_result(data: list) -> str:                                            # функция печати всего списка справочника
    for i in range(len(data)):
        print(f"{i+1} пользователь справочника - {data[i]}\n")

def get_search():                                                               # функция для ввода поискового слова
    search = str(input("Введите информацию для поиска - "))
    return search

def find_by_name(data: list, last_name: str) -> str:                            # функция поиска номера телефона по фамилии
    for el in data:
        if el.get("Фамилия") == last_name:
            return el.get("Телефон")
    return "Такой абонент отсутствует"

def find_by_number(data: list, phone_number: str) -> str:                       # функция поиска ФИ по телефонному номеру
    for el in data:
        if el.get("Телефон") == phone_number:
            return f'{el.get("Фамилия")}, {el.get("Имя")}'
    return "Такой абонент отсутствует"

def show_menu():                                                                # функция перечисления меню работы со справочником
    print(  "1 - печать всего справочника,\n"
            "2 - поиск телефона по фамилии,\n"
            "3 - поиск фамилии и имени по номеру телефона,\n"
            "4 - дополнение справочника новыми записями,\n"
            "5 - внесение изменений в справочник,\n"
            "6 - удаление записей из справочника,\n"
            "7 - остановка работы со справочником\n")
    choice = int(input())
    return choice

def work_with_phonebook():                                                      # функция работы с телефонной книгой
    choice = show_menu()
    print()
    phone_book = (read_txt("phone_numbers1.txt"))   
    while (choice != 7):
        if choice == 1:                                                         # если выбор = 1, то выводим печать справочника (функция print_result)
            print("Вывод на экран всего справочника -  ")    
            print_result(phone_book)
        elif choice == 2:                                                       # если выбор = 2, то запуск функции поиска номера телефона по фамилии - find_by_name
            print("Поиск номера телефона по фамилии -  ")
            name = get_search()
            print(find_by_name(phone_book, name))
        elif choice == 3:                                                       # если выбор = 3, то запуск функции поиска номера фамилии по телефону - find_by_number
            print("Поиск по номеру телефона ")
            number = get_search()
            print(find_by_number(phone_book, number))
        elif choice == 4:                                                        # если выбор = 4, то запуск функций добавления пользователей в справочник и сохранения его в файл
            print("Добавление пользователей в справочник и сохранение в файл -  ")
            phone_book = input_and_add_user_dict(phone_book)
            write_txt("phone_numbers1.txt", phone_book)  
        elif choice == 5:                                                        # если выбор = 5, то запуск функций изменения информации в справочнике и сохранения его в файл
            print("Изменение данных в справочнике и сохранение в файл -  ")
            phone_book = change_user_dict(phone_book)
            write_txt("phone_number1s.txt", phone_book)  
        elif choice == 6:                                                        # если выбор = 6, то запуск функций удаления пользователей в справочнике и сохранения его в файл
            print("Удаление пользователей из справочника и сохранение в файл -  ")
            phone_book = delete_user_dict(phone_book)
            write_txt("phone_numbers1.txt", phone_book)  
        elif choice == 6:  print("Всего доброго!")
        choice = show_menu()
  

# ==================== Запускаем функции для справочника =================================

data    = []                                                           # создаем пустой список справочника     - делаем однократно, чтобы не обнулять справочник                                            
write_txt("phone_numbers1.txt", data)                                   # записываем пустой список словарей data в файл phone_numbers.txt - делаем однократно, чтобы не обнулять справочник
data = (read_txt("phone_numbers1.txt"))                                   # открываем (читаем) в переменную список data файл phone_numbers.txt (пустой список)
print(data)                                                              # печатаем пустой список справочника (проверка)

work_with_phonebook()

# Должно  быть так ---------------
# data =  [{'Фамилия': 'Иванов', 'Имя': 'Иван', 'Отчество': 'Иванович','Телефон': '111', 'Описание': 'описание Иванова'}, 
#           {'Фамилия': 'Петров', 'Имя': 'Петр', 'Отчество': 'Петрович','Телефон': '222', 'Описание': 'описание Петрова'}, 
#           {'Фамилия': 'Васичкина', 'Имя': 'Василиса', 'Отчество': 'Васильевна', 'Телефон': '333', 'Описание': 'описание Васичкиной'}, 
#           {'Фамилия': 'Питонов', 'Имя': 'Антон', 'Отчество': 'Антонович', 'Телефон': '777', 'Описание': 'умеет в Питон'}]





